/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  FindAllParams,
  Post,
  PostCreateForm
} from '../../model'
import { axiosInstance } from '../../../../axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Í≤åÏãúÍ∏Ä Ï†ÑÏ≤¥Ï°∞Ìöå
 */
export const findAll = (
    params: FindAllParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<Post[]>(
      {url: `/posts`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getFindAllQueryKey = (params: FindAllParams,) => {
    return [`/posts`, ...(params ? [params]: [])] as const;
    }

    
export const getFindAllInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof findAll>>, FindAllParams['page']>, TError = unknown>(params: FindAllParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData, Awaited<ReturnType<typeof findAll>>, QueryKey, FindAllParams['page']>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAll>>, QueryKey, FindAllParams['page']> = ({ signal, pageParam }) => findAll({...params, page: pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData, Awaited<ReturnType<typeof findAll>>, QueryKey, FindAllParams['page']> & { queryKey: QueryKey }
}

export type FindAllInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAll>>>
export type FindAllInfiniteQueryError = unknown

/**
 * @summary Í≤åÏãúÍ∏Ä Ï†ÑÏ≤¥Ï°∞Ìöå
 */
export const useFindAllInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof findAll>>, FindAllParams['page']>, TError = unknown>(
 params: FindAllParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData, Awaited<ReturnType<typeof findAll>>, QueryKey, FindAllParams['page']>>, request?: SecondParameter<typeof axiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getFindAllInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindAllQueryOptions = <TData = Awaited<ReturnType<typeof findAll>>, TError = unknown>(params: FindAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAll>>> = ({ signal }) => findAll(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData> & { queryKey: QueryKey }
}

export type FindAllQueryResult = NonNullable<Awaited<ReturnType<typeof findAll>>>
export type FindAllQueryError = unknown

/**
 * @summary Í≤åÏãúÍ∏Ä Ï†ÑÏ≤¥Ï°∞Ìöå
 */
export const useFindAll = <TData = Awaited<ReturnType<typeof findAll>>, TError = unknown>(
 params: FindAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAll>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getFindAllQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Í≤åÏãúÍ∏Ä ÏÉùÏÑ±
 */
export const create = (
    postCreateForm: PostCreateForm,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<Post[]>(
      {url: `/posts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postCreateForm
    },
      options);
    }
  


export const getCreateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof create>>, TError,{data: PostCreateForm}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof create>>, TError,{data: PostCreateForm}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof create>>, {data: PostCreateForm}> = (props) => {
          const {data} = props ?? {};

          return  create(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CreateMutationResult = NonNullable<Awaited<ReturnType<typeof create>>>
    export type CreateMutationBody = PostCreateForm
    export type CreateMutationError = unknown

    /**
 * @summary Í≤åÏãúÍ∏Ä ÏÉùÏÑ±
 */
export const useCreate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof create>>, TError,{data: PostCreateForm}, TContext>, request?: SecondParameter<typeof axiosInstance>}
) => {

      const mutationOptions = getCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    